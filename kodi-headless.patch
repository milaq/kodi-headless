From 658e9c38abc57d9bc6a85d02e96e41a8883f3c8c Mon Sep 17 00:00:00 2001
From: sinopsysHK <sinofwd@gmail.com>
Date: Fri, 1 Mar 2019 00:18:37 +0800
Subject: [PATCH] create a dedicated Headless WinSystem which does nothing and
 avoid rendering - working only on linux X11 or GBM

---
 xbmc/AppParamParser.cpp                       |  3 +
 xbmc/AppParamParser.h                         |  1 +
 xbmc/Application.cpp                          | 16 ++--
 xbmc/Application.h                            |  2 +
 xbmc/platform/xbmc.cpp                        |  0
 xbmc/windowing/CMakeLists.txt                 |  4 +-
 xbmc/windowing/WinSystem.h                    |  2 +-
 xbmc/windowing/WinSystemHeadless.cpp          | 57 +++++++++++++
 xbmc/windowing/WinSystemHeadless.h            | 78 ++++++++++++++++++
 xbmc/windowing/X11/CMakeLists.txt             |  2 +
 xbmc/windowing/X11/WinSystemHeadlessX11.cpp   | 50 ++++++++++++
 xbmc/windowing/X11/WinSystemHeadlessX11.h     | 81 +++++++++++++++++++
 xbmc/windowing/X11/WinSystemX11GLContext.cpp  |  9 ++-
 .../amlogic/WinSystemAmlogicGLESContext.cpp   | 12 ++-
 .../android/WinSystemAndroidGLESContext.cpp   | 12 ++-
 xbmc/windowing/gbm/WinSystemGbmGLContext.cpp  |  9 ++-
 .../windowing/gbm/WinSystemGbmGLESContext.cpp |  9 ++-
 xbmc/windowing/osx/WinSystemIOS.mm            | 12 ++-
 xbmc/windowing/osx/WinSystemOSXGL.mm          | 13 ++-
 .../windowing/rpi/WinSystemRpiGLESContext.cpp | 12 ++-
 .../wayland/WinSystemWaylandEGLContextGL.cpp  | 12 ++-
 .../WinSystemWaylandEGLContextGLES.cpp        | 12 ++-
 xbmc/windowing/win10/WinSystemWin10DX.cpp     | 13 ++-
 xbmc/windowing/windows/WinSystemWin32DX.cpp   | 12 ++-
 24 files changed, 401 insertions(+), 32 deletions(-)
 mode change 100644 => 100755 xbmc/Application.cpp
 mode change 100644 => 100755 xbmc/platform/xbmc.cpp
 mode change 100644 => 100755 xbmc/windowing/CMakeLists.txt
 mode change 100644 => 100755 xbmc/windowing/WinSystem.h
 create mode 100755 xbmc/windowing/WinSystemHeadless.cpp
 create mode 100755 xbmc/windowing/WinSystemHeadless.h
 mode change 100644 => 100755 xbmc/windowing/X11/CMakeLists.txt
 create mode 100755 xbmc/windowing/X11/WinSystemHeadlessX11.cpp
 create mode 100755 xbmc/windowing/X11/WinSystemHeadlessX11.h
 mode change 100644 => 100755 xbmc/windowing/X11/WinSystemX11GLContext.cpp
 mode change 100644 => 100755 xbmc/windowing/amlogic/WinSystemAmlogicGLESContext.cpp
 mode change 100644 => 100755 xbmc/windowing/android/WinSystemAndroidGLESContext.cpp
 mode change 100644 => 100755 xbmc/windowing/gbm/WinSystemGbmGLContext.cpp
 mode change 100644 => 100755 xbmc/windowing/gbm/WinSystemGbmGLESContext.cpp
 mode change 100644 => 100755 xbmc/windowing/osx/WinSystemIOS.mm
 mode change 100644 => 100755 xbmc/windowing/osx/WinSystemOSXGL.mm
 mode change 100644 => 100755 xbmc/windowing/rpi/WinSystemRpiGLESContext.cpp
 mode change 100644 => 100755 xbmc/windowing/wayland/WinSystemWaylandEGLContextGL.cpp
 mode change 100644 => 100755 xbmc/windowing/wayland/WinSystemWaylandEGLContextGLES.cpp
 mode change 100644 => 100755 xbmc/windowing/win10/WinSystemWin10DX.cpp
 mode change 100644 => 100755 xbmc/windowing/windows/WinSystemWin32DX.cpp

--- a/xbmc/AppParamParser.cpp
+++ b/xbmc/AppParamParser.cpp
@@ -55,6 +55,7 @@
   printf("Arguments:\n");
   printf("  -fs\t\t\tRuns %s in full screen\n", CSysInfo::GetAppName().c_str());
   printf("  --standalone\t\t%s runs in a stand alone environment without a window \n", CSysInfo::GetAppName().c_str());
+  printf("  --headless\t\t%s runs in headless mode without a window \n", CSysInfo::GetAppName().c_str());
   printf("\t\t\tmanager and supporting applications. For example, that\n");
   printf("\t\t\tenables network settings.\n");
   printf("  -p or --portable\t%s will look for configurations in install folder instead of ~/.%s\n", CSysInfo::GetAppName().c_str(), lcAppName.c_str());
@@ -76,6 +77,8 @@
     DisplayVersion();
   else if (arg == "--standalone")
     m_standAlone = true;
+  else if (arg == "--headless")
+    m_headLess = true;
   else if (arg == "-p" || arg  == "--portable")
     m_platformDirectories = false;
   else if (arg == "--debug")
--- a/xbmc/AppParamParser.h
+++ b/xbmc/AppParamParser.h
@@ -30,6 +30,7 @@
   bool m_platformDirectories = true;
   bool m_testmode = false;
   bool m_standAlone = false;
+  bool m_headLess = false;
 
 private:
   void ParseArg(const std::string &arg);
--- a/xbmc/Application.cpp
+++ b/xbmc/Application.cpp
@@ -364,6 +364,7 @@
   m_bPlatformDirectories = params.m_platformDirectories;
   m_bTestMode = params.m_testmode;
   m_bStandalone = params.m_standAlone;
+  m_bHeadless = params.m_headLess;
 
   CServiceBroker::CreateLogging();
 
@@ -577,7 +578,7 @@
   m_pAppPort = std::make_shared<CAppInboundProtocol>(*this);
   CServiceBroker::RegisterAppPort(m_pAppPort);
 
-  m_pWinSystem = CWinSystemBase::CreateWinSystem();
+  m_pWinSystem = CWinSystemBase::CreateWinSystem(!m_bHeadless);
   CServiceBroker::RegisterWinSystem(m_pWinSystem.get());
 
   if (!m_ServiceManager->InitStageTwo(params, m_pSettingsComponent->GetProfileManager()->GetProfileUserDataFolder()))
@@ -622,7 +623,7 @@
 {
   m_frameMoveGuard.lock();
 
-  m_renderGUI = true;
+  m_renderGUI = !m_bHeadless;
 
   if (!CServiceBroker::GetWinSystem()->InitWindowSystem())
   {
@@ -776,7 +777,7 @@
 
   bool uiInitializationFinished = false;
 
-  if (CServiceBroker::GetGUI()->GetWindowManager().Initialized())
+  if (!m_bHeadless && CServiceBroker::GetGUI()->GetWindowManager().Initialized())
   {
     const std::shared_ptr<CSettings> settings = CServiceBroker::GetSettingsComponent()->GetSettings();
 
@@ -904,9 +905,12 @@
 
   CLog::Log(LOGINFO, "initialize done");
 
-  CheckOSScreenSaverInhibitionSetting();
-  // reset our screensaver (starts timers etc.)
-  ResetScreenSaver();
+  if (!m_bHeadless)
+  {
+    CheckOSScreenSaverInhibitionSetting();
+    // reset our screensaver (starts timers etc.)
+    ResetScreenSaver();
+  }
 
   // if the user interfaces has been fully initialized let everyone know
   if (uiInitializationFinished)
--- a/xbmc/Application.h
+++ b/xbmc/Application.h
@@ -312,6 +312,7 @@
 
   bool PlatformDirectoriesEnabled() { return m_bPlatformDirectories; }
   bool IsStandAlone() { return m_bStandalone; }
+  bool IsHeadLess() { return m_bHeadless; }
   bool IsEnableTestMode() { return m_bTestMode; }
 
   bool IsAppFocused() const { return m_AppFocused; }
@@ -444,6 +445,7 @@
   bool m_skipGuiRender = false;
 
   bool m_bStandalone = false;
+  bool m_bHeadless = false;
   bool m_bTestMode = false;
   bool m_bSystemScreenSaverEnable = false;
 
--- a/xbmc/windowing/CMakeLists.txt
+++ b/xbmc/windowing/CMakeLists.txt
@@ -1,13 +1,15 @@
 set(SOURCES GraphicContext.cpp
             OSScreenSaver.cpp
             Resolution.cpp
-            WinSystem.cpp)
+            WinSystem.cpp
+            WinSystemHeadless.cpp)
 
 set(HEADERS GraphicContext.h
             OSScreenSaver.h
             Resolution.h
             WinEvents.h
             WinSystem.h
+            WinSystemHeadless.h
             XBMC_events.h
             VideoSync.h)
 
--- a/xbmc/windowing/WinSystem.h
+++ b/xbmc/windowing/WinSystem.h
@@ -45,7 +45,7 @@
   CWinSystemBase();
   virtual ~CWinSystemBase();
 
-  static std::unique_ptr<CWinSystemBase> CreateWinSystem();
+  static std::unique_ptr<CWinSystemBase> CreateWinSystem(bool render);
 
   // Access render system interface
   virtual CRenderSystemBase *GetRenderSystem() { return nullptr; }
--- /dev/null
+++ b/xbmc/windowing/WinSystemHeadless.cpp
@@ -0,0 +1,57 @@
+/*
+ *  Copyright (C) 2005-2018 Team Kodi
+ *  This file is part of Kodi - https://kodi.tv
+ *
+ *  SPDX-License-Identifier: GPL-2.0-or-later
+ *  See LICENSES/README.md for more information.
+ */
+
+#include "WinSystemHeadless.h"
+
+#include "utils/log.h"
+
+#include <vector>
+#include <string>
+
+//using namespace KODI::MESSAGING;
+using namespace KODI::WINDOWING;
+
+#define EGL_NO_CONFIG (EGLConfig)0
+
+CWinSystemHeadless::CWinSystemHeadless() : CWinSystemBase(), CRenderSystemBase()
+{
+}
+
+CWinSystemHeadless::~CWinSystemHeadless() = default;
+
+// bool CWinSystemHeadless::MessagePump()
+// {
+//   return m_winEvents->MessagePump();
+// }
+
+bool CWinSystemHeadless::InitWindowSystem() {return true;};
+bool CWinSystemHeadless::DestroyWindowSystem() {return true;};
+bool CWinSystemHeadless::CreateNewWindow(const std::string& name, bool fullScreen, RESOLUTION_INFO& res) {return true;};
+bool CWinSystemHeadless::DestroyWindow() {return true;};
+bool CWinSystemHeadless::ResizeWindow(int newWidth, int newHeight, int newLeft, int newTop) {return true;};
+void CWinSystemHeadless::FinishWindowResize(int newWidth, int newHeight) {};
+bool CWinSystemHeadless::SetFullScreen(bool fullScreen, RESOLUTION_INFO& res, bool blankOtherDisplays) {return true;};
+void CWinSystemHeadless::UpdateResolutions() {};
+void CWinSystemHeadless::ShowOSMouse(bool show) {};
+
+void CWinSystemHeadless::NotifyAppActiveChange(bool bActivated) {};
+void CWinSystemHeadless::NotifyAppFocusChange(bool bGaining) {};
+
+bool CWinSystemHeadless::Minimize() {return true;};
+bool CWinSystemHeadless::Restore() {return true;};
+bool CWinSystemHeadless::Hide() {return true;};
+bool CWinSystemHeadless::Show(bool raise) {return true;};
+void CWinSystemHeadless::Register(IDispResource *resource) {};
+void CWinSystemHeadless::Unregister(IDispResource *resource) {};
+bool CWinSystemHeadless::HasCalibration(const RESOLUTION_INFO &resInfo) {return true;};
+bool CWinSystemHeadless::UseLimitedColor() {return true;};
+
+void CWinSystemHeadless::ShowSplash(const std::string& message)
+{
+  CLog::Log(LOGDEBUG, message.c_str());
+};
--- /dev/null
+++ b/xbmc/windowing/WinSystemHeadless.h
@@ -0,0 +1,78 @@
+/*
+ *  Copyright (C) 2005-2018 Team Kodi
+ *  This file is part of Kodi - https://kodi.tv
+ *
+ *  SPDX-License-Identifier: GPL-2.0-or-later
+ *  See LICENSES/README.md for more information.
+ */
+
+#pragma once
+
+#include "rendering/RenderSystem.h"
+#include "WinSystem.h"
+
+#include <string>
+#include <vector>
+
+
+class CWinSystemHeadless : public CWinSystemBase, public CRenderSystemBase
+{
+public:
+  CWinSystemHeadless();
+  ~CWinSystemHeadless() override;
+
+  // CWinSystemBase
+  CRenderSystemBase *GetRenderSystem() override { return this; }
+  bool InitWindowSystem() override;
+  bool DestroyWindowSystem() override;
+  bool CreateNewWindow(const std::string& name, bool fullScreen, RESOLUTION_INFO& res) override;
+  bool DestroyWindow() override;
+  bool ResizeWindow(int newWidth, int newHeight, int newLeft, int newTop) override;
+  void FinishWindowResize(int newWidth, int newHeight) override;
+  bool SetFullScreen(bool fullScreen, RESOLUTION_INFO& res, bool blankOtherDisplays) override;
+  void UpdateResolutions() override;
+  void ShowOSMouse(bool show) override;
+
+  void NotifyAppActiveChange(bool bActivated) override;
+  void NotifyAppFocusChange(bool bGaining) override;
+
+  bool Minimize() override;
+  bool Restore() override;
+  bool Hide() override;
+  bool Show(bool raise = true) override;
+  void Register(IDispResource *resource) override;
+  void Unregister(IDispResource *resource) override;
+  bool HasCalibration(const RESOLUTION_INFO &resInfo) override;
+  bool UseLimitedColor() override;
+
+  // winevents override
+  //bool MessagePump() override;
+
+  // render
+  bool InitRenderSystem() override { return true;} ;
+  bool DestroyRenderSystem() override { return true;} ;
+  bool ResetRenderSystem(int width, int height) override { return true;} ;
+
+  bool BeginRender() override { return true;} ;
+  bool EndRender() override { return true;} ;
+  void PresentRender(bool rendered, bool videoLayer) override {} ;
+  bool ClearBuffers(UTILS::Color color) override { return true;} ;
+  bool IsExtSupported(const char* extension) const override { return false;} ;
+
+  void SetViewPort(const CRect& viewPort) override {} ;
+  void GetViewPort(CRect& viewPort) override {} ;
+
+  void SetScissors(const CRect &rect) override {} ;
+  void ResetScissors() override {} ;
+
+  void CaptureStateBlock() override {} ;
+  void ApplyStateBlock() override {} ;
+
+  void SetCameraPosition(const CPoint &camera, int screenWidth, int screenHeight, float stereoFactor = 0.f) override {} ;
+  void ShowSplash(const std::string& message) override;
+
+protected:
+
+private:
+
+};
--- a/xbmc/windowing/X11/CMakeLists.txt
+++ b/xbmc/windowing/X11/CMakeLists.txt
@@ -4,6 +4,7 @@
             OSScreenSaverX11.cpp
             WinEventsX11.cpp
             WinSystemX11.cpp
+            WinSystemHeadlessX11.cpp
             XRandR.cpp
             X11DPMSSupport.cpp)
 
@@ -13,6 +14,7 @@
             OSScreenSaverX11.h
             WinEventsX11.h
             WinSystemX11.h
+            WinSystemHeadlessX11.h
             XRandR.h
             X11DPMSSupport.h)
 
--- /dev/null
+++ b/xbmc/windowing/X11/WinSystemHeadlessX11.cpp
@@ -0,0 +1,50 @@
+/*
+ *  Copyright (C) 2005-2018 Team Kodi
+ *  This file is part of Kodi - https://kodi.tv
+ *
+ *  SPDX-License-Identifier: GPL-2.0-or-later
+ *  See LICENSES/README.md for more information.
+ */
+
+#include "WinSystemHeadlessX11.h"
+#include "utils/log.h"
+#include <vector>
+#include <string>
+
+//using namespace KODI::MESSAGING;
+using namespace KODI::WINDOWING;
+
+CWinSystemHeadlessX11::CWinSystemHeadlessX11() : 
+  CWinSystemX11(),
+  CRenderSystemBase()
+{
+}
+
+CWinSystemHeadlessX11::~CWinSystemHeadlessX11() = default;
+
+bool CWinSystemHeadlessX11::InitWindowSystem() {return true;};
+bool CWinSystemHeadlessX11::DestroyWindowSystem() {return true;};
+bool CWinSystemHeadlessX11::CreateNewWindow(const std::string& name, bool fullScreen, RESOLUTION_INFO& res) {return true;};
+bool CWinSystemHeadlessX11::DestroyWindow() {return true;};
+bool CWinSystemHeadlessX11::ResizeWindow(int newWidth, int newHeight, int newLeft, int newTop) {return true;};
+void CWinSystemHeadlessX11::FinishWindowResize(int newWidth, int newHeight) {};
+bool CWinSystemHeadlessX11::SetFullScreen(bool fullScreen, RESOLUTION_INFO& res, bool blankOtherDisplays) {return true;};
+void CWinSystemHeadlessX11::UpdateResolutions() {};
+void CWinSystemHeadlessX11::ShowOSMouse(bool show) {};
+
+void CWinSystemHeadlessX11::NotifyAppActiveChange(bool bActivated) {};
+void CWinSystemHeadlessX11::NotifyAppFocusChange(bool bGaining) {};
+
+bool CWinSystemHeadlessX11::Minimize() {return true;};
+bool CWinSystemHeadlessX11::Restore() {return true;};
+bool CWinSystemHeadlessX11::Hide() {return true;};
+bool CWinSystemHeadlessX11::Show(bool raise) {return true;};
+void CWinSystemHeadlessX11::Register(IDispResource *resource) {};
+void CWinSystemHeadlessX11::Unregister(IDispResource *resource) {};
+bool CWinSystemHeadlessX11::HasCalibration(const RESOLUTION_INFO &resInfo) {return true;};
+bool CWinSystemHeadlessX11::UseLimitedColor() {return true;};
+
+void CWinSystemHeadlessX11::ShowSplash(const std::string& message)
+{
+  CLog::Log(LOGDEBUG, message.c_str());
+};
--- /dev/null
+++ b/xbmc/windowing/X11/WinSystemHeadlessX11.h
@@ -0,0 +1,81 @@
+/*
+ *  Copyright (C) 2005-2018 Team Kodi
+ *  This file is part of Kodi - https://kodi.tv
+ *
+ *  SPDX-License-Identifier: GPL-2.0-or-later
+ *  See LICENSES/README.md for more information.
+ */
+
+#pragma once
+
+#include "windowing/WinSystemHeadless.h"
+#include "WinSystemX11.h"
+
+#include <string>
+#include <vector>
+
+class CWinSystemHeadlessX11 : public CWinSystemX11, public CRenderSystemBase
+{
+public:
+  CWinSystemHeadlessX11();
+  ~CWinSystemHeadlessX11() override;
+
+  // CWinSystemBase
+  CRenderSystemBase *GetRenderSystem() override { return this; }
+  bool InitWindowSystem() override;
+  bool DestroyWindowSystem() override;
+  bool CreateNewWindow(const std::string& name, bool fullScreen, RESOLUTION_INFO& res) override;
+  bool DestroyWindow() override;
+  bool ResizeWindow(int newWidth, int newHeight, int newLeft, int newTop) override;
+  void FinishWindowResize(int newWidth, int newHeight) override;
+  bool SetFullScreen(bool fullScreen, RESOLUTION_INFO& res, bool blankOtherDisplays) override;
+  void UpdateResolutions() override;
+  void ShowOSMouse(bool show) override;
+
+  void NotifyAppActiveChange(bool bActivated) override;
+  void NotifyAppFocusChange(bool bGaining) override;
+
+  bool Minimize() override;
+  bool Restore() override;
+  bool Hide() override;
+  bool Show(bool raise = true) override;
+  void Register(IDispResource *resource) override;
+  void Unregister(IDispResource *resource) override;
+  bool HasCalibration(const RESOLUTION_INFO &resInfo) override;
+  bool UseLimitedColor() override;
+
+  // winevents override
+  //bool MessagePump() override;
+
+  // render
+  bool InitRenderSystem() override { return true;} ;
+  bool DestroyRenderSystem() override { return true;} ;
+  bool ResetRenderSystem(int width, int height) override { return true;} ;
+
+  bool BeginRender() override { return true;} ;
+  bool EndRender() override { return true;} ;
+  void PresentRender(bool rendered, bool videoLayer) override {} ;
+  bool ClearBuffers(UTILS::Color color) override { return true;} ;
+  bool IsExtSupported(const char* extension) const override { return false;} ;
+
+  void SetViewPort(const CRect& viewPort) override {} ;
+  void GetViewPort(CRect& viewPort) override {} ;
+
+  void SetScissors(const CRect &rect) override {} ;
+  void ResetScissors() override {} ;
+
+  void CaptureStateBlock() override {} ;
+  void ApplyStateBlock() override {} ;
+
+  void SetCameraPosition(const CPoint &camera, int screenWidth, int screenHeight, float stereoFactor = 0.f) override {} ;
+  void ShowSplash(const std::string& message) override;
+
+  // CWinSystemX11
+  virtual bool SetWindow(int width, int height, bool fullscreen, const std::string &output, int *winstate = NULL) override {return true;};
+  virtual XVisualInfo* GetVisual() override {return (XVisualInfo*) nullptr;};
+
+protected:
+
+private:
+
+};
--- a/xbmc/windowing/X11/WinSystemX11GLContext.cpp
+++ b/xbmc/windowing/X11/WinSystemX11GLContext.cpp
@@ -6,6 +6,7 @@
  *  See LICENSES/README.md for more information.
  */
 
+#include "WinSystemHeadlessX11.h"
 #include "WinSystemX11GLContext.h"
 
 #include "Application.h"
@@ -36,9 +37,13 @@
 
 using namespace KODI;
 
-std::unique_ptr<CWinSystemBase> CWinSystemBase::CreateWinSystem()
+std::unique_ptr<CWinSystemBase> CWinSystemBase::CreateWinSystem(bool render)
 {
-  std::unique_ptr<CWinSystemBase> winSystem(new CWinSystemX11GLContext());
+  std::unique_ptr<CWinSystemBase> winSystem(nullptr);
+  if (render)
+    winSystem.reset(new CWinSystemX11GLContext());
+  else
+    winSystem.reset(new CWinSystemHeadlessX11());
   return winSystem;
 }
 
--- a/xbmc/windowing/android/WinSystemAndroidGLESContext.cpp
+++ b/xbmc/windowing/android/WinSystemAndroidGLESContext.cpp
@@ -6,6 +6,7 @@
  *  See LICENSES/README.md for more information.
  */
 
+#include "windowing/WinSystemHeadless.h"
 #include "WinSystemAndroidGLESContext.h"
 
 #include "ServiceBroker.h"
@@ -21,9 +22,16 @@
 #include <EGL/eglext.h>
 
 
-std::unique_ptr<CWinSystemBase> CWinSystemBase::CreateWinSystem()
+std::unique_ptr<CWinSystemBase> CWinSystemBase::CreateWinSystem(bool render)
 {
-  std::unique_ptr<CWinSystemBase> winSystem(new CWinSystemAndroidGLESContext());
+  std::unique_ptr<CWinSystemBase> winSystem(nullptr);
+  if (render)
+    winSystem.reset(new CWinSystemAndroidGLESContext());
+  else
+  {
+    winSystem.reset(new CWinSystemHeadless());
+    CLog::Log(LOGWARNING, "HEADLESS MOD NOT TESTED ON THIS BUILD");
+  }
   return winSystem;
 }
 
--- a/xbmc/windowing/gbm/WinSystemGbmGLContext.cpp
+++ b/xbmc/windowing/gbm/WinSystemGbmGLContext.cpp
@@ -6,6 +6,7 @@
  *  See LICENSES/README.md for more information.
  */
 
+#include "windowing/WinSystemHeadless.h"
 #include "WinSystemGbmGLContext.h"
 
 #include "OptionalsReg.h"
@@ -33,9 +34,13 @@
 : CWinSystemGbmEGLContext(EGL_PLATFORM_GBM_MESA, "EGL_MESA_platform_gbm")
 {}
 
-std::unique_ptr<CWinSystemBase> CWinSystemBase::CreateWinSystem()
+std::unique_ptr<CWinSystemBase> CWinSystemBase::CreateWinSystem(bool render)
 {
-  std::unique_ptr<CWinSystemBase> winSystem(new CWinSystemGbmGLContext());
+  std::unique_ptr<CWinSystemBase> winSystem(nullptr);
+  if (render)
+    winSystem.reset(new CWinSystemGbmGLContext());
+  else
+    winSystem.reset(new CWinSystemHeadless());
   return winSystem;
 }
 
--- a/xbmc/windowing/gbm/WinSystemGbmGLESContext.cpp
+++ b/xbmc/windowing/gbm/WinSystemGbmGLESContext.cpp
@@ -6,6 +6,7 @@
  *  See LICENSES/README.md for more information.
  */
 
+#include "windowing/WinSystemHeadless.h"
 #include "WinSystemGbmGLESContext.h"
 
 #include "OptionalsReg.h"
@@ -38,9 +39,13 @@
 : CWinSystemGbmEGLContext(EGL_PLATFORM_GBM_MESA, "EGL_MESA_platform_gbm")
 {}
 
-std::unique_ptr<CWinSystemBase> CWinSystemBase::CreateWinSystem()
+std::unique_ptr<CWinSystemBase> CWinSystemBase::CreateWinSystem(bool render)
 {
-  std::unique_ptr<CWinSystemBase> winSystem(new CWinSystemGbmGLESContext());
+  std::unique_ptr<CWinSystemBase> winSystem(nullptr);
+  if (render)
+    winSystem.reset(new CWinSystemGbmGLESContext());
+  else
+    winSystem.reset(new CWinSystemHeadless());
   return winSystem;
 }
 
--- a/xbmc/windowing/osx/WinSystemOSXGL.mm
+++ b/xbmc/windowing/osx/WinSystemOSXGL.mm
@@ -6,17 +6,25 @@
  *  See LICENSES/README.md for more information.
  */
 
+#include "windowing/WinSystemHeadless.h"
 #include "WinSystemOSXGL.h"
 
 #include "guilib/Texture.h"
 #include "rendering/gl/RenderSystemGL.h"
-
+#include "utils/log.h"
 
 //------------------------------------------------------------------------------
 //------------------------------------------------------------------------------
-std::unique_ptr<CWinSystemBase> CWinSystemBase::CreateWinSystem()
+std::unique_ptr<CWinSystemBase> CWinSystemBase::CreateWinSystem(bool render)
 {
-  std::unique_ptr<CWinSystemBase> winSystem(new CWinSystemOSXGL());
+  std::unique_ptr<CWinSystemBase> winSystem(nullptr);
+  if (render)
+    winSystem.reset(new CWinSystemOSXGL());
+  else
+  {
+    winSystem.reset(new CWinSystemHeadless());
+    CLog::Log(LOGWARNING, "HEADLESS MOD NOT TESTED ON THIS BUILD");
+  }
   return winSystem;
 }
 
--- a/xbmc/windowing/wayland/WinSystemWaylandEGLContextGL.cpp
+++ b/xbmc/windowing/wayland/WinSystemWaylandEGLContextGL.cpp
@@ -6,6 +6,7 @@
  *  See LICENSES/README.md for more information.
  */
 
+#include "windowing/WinSystemHeadless.h"
 #include "WinSystemWaylandEGLContextGL.h"
 
 #include "OptionalsReg.h"
@@ -24,9 +25,16 @@
 
 using namespace KODI::WINDOWING::WAYLAND;
 
-std::unique_ptr<CWinSystemBase> CWinSystemBase::CreateWinSystem()
+std::unique_ptr<CWinSystemBase> CWinSystemBase::CreateWinSystem(bool render)
 {
-  std::unique_ptr<CWinSystemBase> winSystem(new CWinSystemWaylandEGLContextGL());
+  std::unique_ptr<CWinSystemBase> winSystem(nullptr);
+  if (render)
+    winSystem.reset(new CWinSystemWaylandEGLContextGL());
+  else
+  {
+    winSystem.reset(new CWinSystemHeadless());
+    CLog::Log(LOGWARNING, "HEADLESS MOD NOT TESTED ON THIS BUILD");
+  }
   return winSystem;
 }
 
--- a/xbmc/windowing/wayland/WinSystemWaylandEGLContextGLES.cpp
+++ b/xbmc/windowing/wayland/WinSystemWaylandEGLContextGLES.cpp
@@ -6,6 +6,7 @@
  *  See LICENSES/README.md for more information.
  */
 
+#include "windowing/WinSystemHeadless.h"
 #include "WinSystemWaylandEGLContextGLES.h"
 
 #include "OptionalsReg.h"
@@ -26,9 +27,16 @@
 
 using namespace KODI::WINDOWING::WAYLAND;
 
-std::unique_ptr<CWinSystemBase> CWinSystemBase::CreateWinSystem()
+std::unique_ptr<CWinSystemBase> CWinSystemBase::CreateWinSystem(bool render)
 {
-  std::unique_ptr<CWinSystemBase> winSystem(new CWinSystemWaylandEGLContextGLES());
+  std::unique_ptr<CWinSystemBase> winSystem(nullptr);
+  if (render)
+    winSystem.reset(new CWinSystemWaylandEGLContextGLES());
+  else
+  {
+    winSystem.reset(new CWinSystemHeadless());
+    CLog::Log(LOGWARNING, "HEADLESS MOD NOT TESTED ON THIS BUILD");
+  }
   return winSystem;
 }
 
--- a/xbmc/windowing/win10/WinSystemWin10DX.cpp
+++ b/xbmc/windowing/win10/WinSystemWin10DX.cpp
@@ -6,6 +6,7 @@
  *  See LICENSES/README.md for more information.
  */
 
+#include "windowing/WinSystemHeadless.h"
 #include "WinSystemWin10DX.h"
 
 #include "input/touch/generic/GenericTouchActionHandler.h"
@@ -16,9 +17,17 @@
 
 #include "platform/win32/WIN32Util.h"
 
-std::unique_ptr<CWinSystemBase> CWinSystemBase::CreateWinSystem()
+std::unique_ptr<CWinSystemBase> CWinSystemBase::CreateWinSystem(bool render)
 {
-  return std::make_unique<CWinSystemWin10DX>();
+  std::unique_ptr<CWinSystemBase> winSystem(nullptr);
+  if (render)
+    winSystem.reset(new CWinSystemWin10DX());
+  else
+  {
+    winSystem.reset(new CWinSystemHeadless());
+    CLog::Log(LOGWARNING, "HEADLESS MOD NOT TESTED ON THIS BUILD");
+  }
+  return winSystem;
 }
 
 CWinSystemWin10DX::CWinSystemWin10DX() : CRenderSystemDX()
--- a/xbmc/windowing/windows/WinSystemWin32DX.cpp
+++ b/xbmc/windowing/windows/WinSystemWin32DX.cpp
@@ -6,6 +6,7 @@
  *  See LICENSES/README.md for more information.
  */
 
+#include "windowing/WinSystemHeadless.h"
 #include "WinSystemWin32DX.h"
 
 #include "commons/ilog.h"
@@ -50,9 +51,16 @@
 static PFND3D10DDI_CREATEDEVICE s_fnCreateDeviceOrig{ nullptr };
 static PFND3D10DDI_CREATERESOURCE s_fnCreateResourceOrig{ nullptr };
 
-std::unique_ptr<CWinSystemBase> CWinSystemBase::CreateWinSystem()
+std::unique_ptr<CWinSystemBase> CWinSystemBase::CreateWinSystem(bool render)
 {
-  std::unique_ptr<CWinSystemBase> winSystem(new CWinSystemWin32DX());
+  std::unique_ptr<CWinSystemBase> winSystem(nullptr);
+  if (render)
+    winSystem.reset(new CWinSystemWin32DX());
+  else
+  {
+    winSystem.reset(new CWinSystemHeadless());
+    CLog::Log(LOGWARNING, "HEADLESS MOD NOT TESTED ON THIS BUILD");
+  }
   return winSystem;
 }
 
